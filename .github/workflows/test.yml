name: Deploy PHP Website to AWS EC2 (Generate Key Pair)

on: workflow_dispatch

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.get-ip.outputs.public_ip }}

    steps:
    - name: Checkout Deployment Repo
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.GAURAV_SECRET_KEY_ID }}
        aws-secret-access-key: ${{ secrets.GAURAV_SECRET_KEY_PASS }}
        aws-region: ap-south-1

    - name: Create Key Pair (lampkey)
      id: create-key
      run: |
        echo "Creating EC2 Key Pair lampkey..."
        aws ec2 delete-key-pair --key-name lampkey --region ap-south-1 || true
        aws ec2 create-key-pair \
          --key-name lampkey \
          --key-type rsa \
          --key-format pem \
          --region ap-south-1 \
          --query 'KeyMaterial' \
          --output text > lampkey.pem
        chmod 400 lampkey.pem

    - name: Create or Reuse Security Group
      id: sg
      run: |
        echo "Checking for existing security group..."
        VPC_ID=$(aws ec2 describe-vpcs \
          --filters "Name=isDefault,Values=true" \
          --query "Vpcs[0].VpcId" --output text --region ap-south-1)

        SG_ID=$(aws ec2 describe-security-groups \
          --filters Name=group-name,Values=github-deploy-sg-v2 Name=vpc-id,Values=$VPC_ID \
          --query "SecurityGroups[0].GroupId" --output text --region ap-south-1 2>/dev/null)

        if [ -z "$SG_ID" ] || [ "$SG_ID" == "None" ] || [ "$SG_ID" == "null" ]; then
          echo "Security group not found. Creating a new one..."
          SG_ID=$(aws ec2 create-security-group \
            --group-name github-deploy-sg-v2 \
            --description "Allow SSH and HTTP access" \
            --vpc-id $VPC_ID \
            --region ap-south-1 \
            --query "GroupId" --output text)

          aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0 --region ap-south-1
          aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0 --region ap-south-1
          aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 443 --cidr 0.0.0.0/0 --region ap-south-1
        else
          echo "Security group already exists: $SG_ID"
        fi

        echo "SG_ID=$SG_ID" >> $GITHUB_ENV

    - name: Launch EC2 Instance
      id: launch-ec2
      run: |
        echo "Launching EC2 instance..."
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-03bb6d83c60fc5f7c \
          --count 1 \
          --instance-type t2.micro \
          --key-name lampkey \
          --security-group-ids $SG_ID \
          --region ap-south-1 \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Office2Instance}]' \
          --query "Instances[0].InstanceId" \
          --output text)

        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

        echo "Waiting for EC2 to be running..."
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ap-south-1

    - name: Get Public IP
      id: get-ip
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=Office2Instance" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --region ap-south-1 \
          --output text)

        echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    - name: Wait for SSH to be Ready
      run: sleep 30

    - name: Install Apache, PHP 8.1, and MySQL
      run: |
        ssh -o StrictHostKeyChecking=no -i lampkey.pem ubuntu@$PUBLIC_IP <<EOF
          sudo apt update
          sudo apt install -y apache2 php8.1 php8.1-cli php8.1-mysql mysql-server unzip git
          sudo systemctl enable --now apache2
          sudo systemctl enable --now mysql
        EOF

    - name: Clone and Deploy Your PHP Website
      run: |
        ssh -o StrictHostKeyChecking=no -i lampkey.pem ubuntu@$PUBLIC_IP <<EOF
          cd /tmp
          git clone https://github.com/AryanSharma2206/gym-website.git site
          sudo rm -rf /var/www/html/*
          sudo cp -r site/* /var/www/html/
          sudo chown -R www-data:www-data /var/www/html
          echo "<?php phpinfo(); ?>" | sudo tee /var/www/html/phpinfo.php
          sudo systemctl restart apache2
        EOF

    # Optional: Terminate EC2 Instance After Job
    # - name: Terminate EC2 Instance
    #   if: always()
    #   run: aws ec2 terminate-instances --instance-ids $INSTANCE_ID --region ap-south-1
